version: 2.1
parameters:
  run_automatedtesting:
    default: false
    type: boolean
  run_basedeployment:
    default: true
    type: boolean
defaults: &defaults
  docker:
    - image: circleci/python:2.7-stretch-browsers
install_dependency: &install_dependency
          name: Installation of build and deployment dependencies.
          command: |
            sudo apt install jq python3-pip
            sudo pip3 install awscli --upgrade

install_deploysuite: &install_deploysuite
          name: Installation of install_deploysuite.
          command: |
            git clone --branch v1.4 https://github.com/topcoder-platform/tc-deploy-scripts ../buildscript
            cp ./../buildscript/master_deploy.sh .
            cp ./../buildscript/buildenv.sh .
            cp ./../buildscript/awsconfiguration.sh .

restore_cache_settings_for_build: &restore_cache_settings_for_build
  key: docker-node-modules-la-{{ checksum "package-lock.json" }}

save_cache_settings: &save_cache_settings
  key: docker-node-modules-la-{{ checksum "package-lock.json" }}
  paths:
    - node_modules

builddeploy_steps: &builddeploy_steps
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite
      - restore_cache: *restore_cache_settings_for_build
      - run: ./build.sh
      - save_cache: *save_cache_settings
      - deploy:
          name: Running MasterScript.
          command: |
            ./awsconfiguration.sh $DEPLOY_ENV
            source awsenvconf
            ./buildenv.sh -e $DEPLOY_ENV -b ${DEPLOY_ENV}-groups-api-deployvar
            source buildenvvar
            ./master_deploy.sh -d ECS -e $DEPLOY_ENV -t latest -s ${APP_ENV}-global-appvar,${DEPLOY_ENV}-groups-api-appvar -i groups-api
            #./master_deploy.sh -d ECS -e $DEPLOY_ENV -t latest -s groups-api -i groups-api
            #testing code changes
            if [[ true ]]; then
                ./buildenv.sh -e $DEPLOY_ENV -b ${APP_ENV}-qa-v1-appvar
                source buildenvvar 
                echo "Making circle ci curl call to launch new job" 
                curl --request POST \
                  --url https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline \
                  --header "Circle-Token: ${QA_USER_TOKEN}" \
                  --header 'content-type: application/json' \
                  --data '{"branch":"'"$CIRCLE_BRANCH"'","parameters":{"run_automatedtesting":true , "run_basedeployment": false}}'
            fi  

jobs:
  # Build & Deploy against development backend
  "build-dev":
    <<: *defaults
    environment:
      DEPLOY_ENV: "DEV"
      APP_ENV: "dev"
    steps: *builddeploy_steps

  # Build & Deploy against production backend
  "build-prod":
    <<: *defaults
    environment:
      DEPLOY_ENV: "PROD"
      APP_ENV: "prod"
    steps: *builddeploy_steps

  "Run-Newman-Test":
    docker:
      - image: circleci/node:12
        environment:
          DEPLOY_ENV: "DEV"
          LOGICAL_ENV: "dev"
          APPNAME: "groups-api"
      - image: tray/dynamodb-local
        command: "-inMemory -port 7777"
      - image: elasticsearch:6.8.13
        environment:
          discovery.type: "single-node"
    steps:
      - checkout
      - setup_remote_docker
      - run: *install_dependency
      - run: *install_deploysuite      
      - run:
          name: 'newman test'
          no_output_timeout: 30m
          command: |
            ./awsconfiguration.sh $DEPLOY_ENV
            source awsenvconf
            ./buildenv.sh -e $DEPLOY_ENV -b ${LOGICAL_ENV}-${APPNAME}-qa-appvar
            source buildenvvar
            npm install --loglevel verbose
            npm run test:newman:clear
            npm run test:newman
            npm run test:newman:clear
      - store_artifacts:
          path: ./newman

workflows:
  version: 2
  build:
    when: << pipeline.parameters.run_basedeployment >>
    jobs:
      # Development builds are executed on "develop" branch only.
      - "build-dev":
          context : org-global
          filters:
            branches:
              only:
                - develop
                - plat-1226-bulk-apis
      - "build-prod":
          context : org-global
          filters:
            branches:
              only:
                - master

  testingflow:
    when: << pipeline.parameters.run_automatedtesting >>
    jobs:
      - Hold [Performance-Testing]:
          type: approval
      - "Run-Newman-Test":
          context : org-global   
          requires:
            - Hold [Performance-Testing]     
          filters:
            branches:
              only:
                - develop
